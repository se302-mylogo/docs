# Generated by Django 3.1.3 on 2021-01-04 16:11

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('name', models.CharField(max_length=20, verbose_name='姓名')),
                ('gender', models.IntegerField(choices=[(0, '男'), (1, '女')], verbose_name='性别')),
                ('role', models.IntegerField(choices=[(0, '学生'), (1, '教师')], verbose_name='角色')),
                ('school', models.CharField(max_length=30, verbose_name='学校')),
                ('age', models.PositiveIntegerField(blank=True, verbose_name='年龄')),
                ('grade', models.CharField(blank=True, max_length=10, verbose_name='年级')),
                ('class_name', models.CharField(blank=True, max_length=20, verbose_name='班级')),
                ('telephone', models.CharField(blank=True, max_length=15, verbose_name='电话')),
                ('title', models.CharField(max_length=20, verbose_name='职称')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('name', models.CharField(max_length=64, verbose_name='课程名称')),
                ('start_date', models.DateTimeField(verbose_name='开始时间')),
                ('end_date', models.DateTimeField(verbose_name='结束时间')),
                ('points', models.FloatField(default=0.0, verbose_name='学分')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Homework',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('available_since', models.DateTimeField(verbose_name='可用时间')),
                ('deadline', models.DateTimeField(verbose_name='截止时间')),
                ('status', models.IntegerField(choices=[(0, '已锁定'), (1, '开放提交'), (2, '已截止')], verbose_name='状态')),
                ('total_score', models.FloatField(verbose_name='总分')),
                ('name', models.CharField(max_length=100, verbose_name='作业名称')),
                ('description', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), default=list, size=None, verbose_name='作业描述')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('token', models.UUIDField(db_index=True, default=uuid.uuid4, verbose_name='token')),
                ('filename', models.CharField(max_length=64, verbose_name='文件名')),
                ('size', models.PositiveBigIntegerField(verbose_name='文件大小')),
                ('file', models.FileField(upload_to='files', verbose_name='文件')),
                ('mime', models.CharField(max_length=64, verbose_name='MIME-Type')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HomeworkSubmit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('description', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=None, verbose_name='作业提交描述')),
                ('score', models.FloatField(default=0.0, verbose_name='得分')),
                ('review', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), default=list, size=None, verbose_name='评语')),
                ('reviewed', models.BooleanField(default=False, verbose_name='是否批阅')),
                ('attachments', models.ManyToManyField(to='cloudhomework.Media', verbose_name='作业提交附件')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='提交者')),
                ('homework', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submits', to='cloudhomework.homework', verbose_name='所属作业')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='homework',
            name='attachments',
            field=models.ManyToManyField(to='cloudhomework.Media', verbose_name='作业附件'),
        ),
        migrations.AddField(
            model_name='homework',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='homeworks', to='cloudhomework.course', verbose_name='所属课程'),
        ),
        migrations.AddField(
            model_name='course',
            name='cover',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cloudhomework.media', verbose_name='课程封面'),
        ),
        migrations.AddField(
            model_name='course',
            name='students',
            field=models.ManyToManyField(related_name='selected_courses', to=settings.AUTH_USER_MODEL, verbose_name='选修学生'),
        ),
        migrations.AddField(
            model_name='course',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='opened_courses', to=settings.AUTH_USER_MODEL, verbose_name='教师'),
        ),
        migrations.AddField(
            model_name='user',
            name='avatar',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cloudhomework.media', verbose_name='头像'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
